#!/bin/bash
#Copyright 2021 - Albert Montijn (montijnalbert@gmail.com)
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#   ---------------------------------------------------------------------------
#   Programming is the result of learning from others and making errors.
#   A good programmer often follows the tips and tricks of better programmers.
#   The solution of a problem seldom leads to new or original code.
#   So any resemblance to already existing code is purely coincidental
#

# software-setup - script to setup smarthome software
# docker-compose must be installed !
# The following can be installed:
# mosquitto : the broker between zigbee and domoticz, and rhasspy when internal broker is not used
# domoticz 
# zigbee2mqtt
# rhasspy
# node-red


confirm_install(){
	echo -n "Install $1 (Y/n) ?"
	read ans
	case ${ans:-Y} in
	[nN]*) return ;;
	*) $1 ;;
	esac
}

get_value_for() {
	# Ask for a value for shell-variable
	# Accepts 2 arguments: 
	# 1: Name of the variable to set
	# 2: Default value (optional)
	#    No default value implies a loop until a value is given 
	DEFAULT=$2
	eval $1=$DEFAULT
	echo -n "Enter value for $1 (enter = $2) ? "
	read ans
	while [ -z "$ans" -a -z "$DEFAULT" ]
	do
		echo -n "You MUST enter a value for $1 : "
		read ans
	done
	[ -z "$ans" ] || eval $1=$ans
}

get_myip() {
	# Looks up IP-number and puts the value in a shell-variable
	# Accepts 1 argument: 
	# 1: Name of the variable to set
	#    No variable name implies IP for the variable name
	DEST=${1:-IP}
	eval $DEST=$(hostname -I | awk '{print $1 }')
}

init_yml() {
	cat > $YML_FILE <<EOF
version: "3.7"
services:
EOF
}

mosquitto() {
	get_value_for MOSQUITTO_1883 1883
	get_value_for MOSQUITTO_9001 9001
	# Signal the script that the MQTT is started
	# on the server with IP-number in MQTT_IP
	# Used in zigbee2mqtt configuration
	get_myip MQTT_IP
	BROKER_INSTALLED=yes
	cat >> $YML_FILE <<EOF
  broker:
    container_name: mosquitto
    image: eclipse-mosquitto
    restart: unless-stopped
    volumes:
      - "${VOLUMES_DIR}/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf"
      - "${VOLUMES_DIR}/mosquitto/data:/mosquitto/data"
      - "${VOLUMES_DIR}/mosquitto/log:/mosquitto/log"
    ports:
      - "${MOSQUITTO_1883}:1883"
      - "${MOSQUITTO_9001}:9001"

EOF

	mkdir -p ${VOLUMES_DIR}/mosquitto/config
	cat >> $VOLUMES_DIR/mosquitto/config/mosquitto.conf <<EOF
listener 1883
allow_anonymous true
persistence true
persistence_location /mosquitto/data/
log_dest file /mosquitto/log/mosquitto.log
EOF

	mkdir -p ${VOLUMES_DIR}/mosquitto/data
	mkdir -p ${VOLUMES_DIR}/mosquitto/log

}

get_devices_list(){
	# Add devices to the devices list
	[ -z "$1" ] && return
	echo "devices:"
	for DEV in $1
	do
		echo "      - \"$DEV:$DEV\""
	done
}

zigbee2mqtt(){
	get_value_for ZIGBEE_DEVICE $ZIGBEE_DEVICE
	get_value_for MQTT_IP $MQTT_IP
	ZIGBEE_INSTALLED=yes

	cat >> $YML_FILE <<EOF
  zigbee2mqtt:
    image: koenkk/zigbee2mqtt
    container_name: zigbee2mqtt
EOF
	[ -n "BROKER_INSTALLED" ] && cat >> $YML_FILE <<EOF 
    depends_on:
      - broker
EOF
	cat >> $YML_FILE <<EOF
    restart: unless-stopped
    volumes:
      - /run/udev:/run/udev:ro
      - ${VOLUMES_DIR}/zigbee2mqtt:/app/data
    devices:
      - ${ZIGBEE_DEVICE}:${ZIGBEE_DEVICE}
    environment:
      - TZ=${TZ}

EOF

	mkdir -p ${VOLUMES_DIR}/zigbee2mqtt
	cat >> $VOLUMES_DIR/zigbee2mqtt/configuration.yaml <<EOF
# Home Assistant integration (MQTT discovery)
homeassistant: false

# allow new devices to join
permit_join: true

# MQTT settings
mqtt:
  # MQTT base topic for zigbee2mqtt MQTT messages
  base_topic: zigbee2mqtt
  # MQTT server URL
  server: 'mqtt://$MQTT_IP'
  # MQTT server authentication, uncomment if required:
  # user: my_user
  # password: my_password

# Serial settings
serial:
  # Location of CC2531 USB sniffer
  port: ${ZIGBEE_DEVICE}
EOF

}

domoticz() {
	DIR=$(dirname $0)
	echo "List of USB-devices. Check the proposed value !"
	$DIR/list-usb-devices
	get_value_for DOMOTICZ_DEVICES "$DOMOTICZ_DEVICES"
	get_value_for DOMOTICZ_8080 $DOMOTICZ_8080
	DEVICES=$(get_devices_list "$DOMOTICZ_DEVICES")

	cat >> $YML_FILE <<EOF
  domoticz:
    container_name: domoticz
    image: domoticz/domoticz
EOF
	[ -n "BROKER_INSTALLED" ] && cat >> $YML_FILE <<EOF 
    depends_on:
      - broker
EOF
	cat >> $YML_FILE <<EOF
    restart: unless-stopped
    $DEVICES
    ports:
      - "${DOMOTICZ_8080}:8080"
    volumes:
      - "${VOLUMES_DIR}/domoticz/userdata:/opt/domoticz/userdata"
    environment:
      - TZ=$TZ
      - LOG_PATH=/opt/domoticz/userdata/domoticz.log

EOF

	mkdir -p ${VOLUMES_DIR}/domoticz/userdata

	# Is zigbee2mqtt installed? Install the Domoticz zigbee2mqtt plugin
	if [ -n "$ZIGBEE_INSTALLED" ] 
	then
		PLUGINDIR="${VOLUMES_DIR}/domoticz/userdata/plugins"
		[ -d $PLUGINDIR ] || mkdir -p $PLUGINDIR
		(
		cd $PLUGINDIR
		git clone "https://github.com/stas-demydiuk/domoticz-zigbee2mqtt-plugin.git" zigbee2mqtt
		)
	fi

}

rhasspy() {
	get_value_for RHASSPY_12101 $RHASSPY_12101
	get_value_for RHASSPY_PROFILE $RHASSPY_PROFILE

	cat >> $YML_FILE <<EOF
  rhasspy:
    container_name: rhasspy_nl
    image: "rhasspy/rhasspy"
EOF
	[ -n "BROKER_INSTALLED" ] && cat >> $YML_FILE <<EOF 
    depends_on:
      - broker
EOF
	cat >> $YML_FILE <<EOF
    restart: unless-stopped
    volumes:
        - "${VOLUMES_DIR}/rhasspy/profiles:/profiles"
        - "/etc/localtime:/etc/localtime:ro"
    ports:
        - "${RHASSPY_12101}:12101"
    devices:
        - "/dev/snd:/dev/snd"
    command: --user-profiles /profiles --profile ${RHASSPY_PROFILE}

EOF

	mkdir -p ${VOLUMES_DIR}/rhasspy/profiles

}

node-red(){
	get_value_for NODERED_1880 $NODERED_1880
	
	cat >> $YML_FILE <<EOF
  node-red:
    image: nodered/node-red
    container_name: node-red
EOF
	[ -n "BROKER_INSTALLED" ] && cat >> $YML_FILE <<EOF 
    depends_on:
      - broker
EOF
	cat >> $YML_FILE <<EOF
    environment:
      - TZ=${TZ}
    ports:
      - "${NODERED_1880}:1880"
    volumes:
      - "${VOLUMES_DIR}/nodered:/data:rw"

EOF

	mkdir -p ${VOLUMES_DIR}/nodered

}

create_bin() {
	DOCO=doco
	SCRIPTDIR=$(cd $(dirname $0) ; pwd)
	DOCOLIST=$($SCRIPTDIR/$DOCO --list)
	BIN=
	[ -d $HOME/.local/bin ] && BIN=$HOME/bin
	[ -d $HOME/bin ] && BIN=$HOME/bin
	[ -z "$BIN" ] && {
		BIN=$HOME/bin
		mkdir $BIN
		echo "---------------------------------------------------"
		echo "---- New directory for executables created     ----"
		echo "---- Logout and login again if you want to     ----"
		echo "---- use $DOCO for docker-compose) shortcuts    ----"
		echo "---------------------------------------------------"
		}
	( cd $BIN;
	if [ ! -f "$DOCO" ] 
	then
		if cp $SCRIPTDIR/$DOCO .
		then
			echo "---- Added $DOCO to $BIN"
			chmod a+xr-w $DOCO
			for script in $DOCOLIST
			do
				if [ ! -f "$script" ] && ln $DOCO $script
				then
					echo "---- Added $script to $BIN"
				else
					echo "---- ERROR: Not added $script to $BIN"
				fi
			done
		else
			echo "---- ERROR: Not added $DOCO to $BIN. Could not copy"
		fi
	else
		echo "---- Not added $DOCO to $BIN. $DOCO exists"
	fi
	)
	
}

#########################################################################
##
##  Main 
##
#########################################################################
# You want the script to run in an empty directory !

# Check for existence of docker-compose
docker-compose --version > /dev/null 2>&1 || {
	echo "---- ERROR: I can not run 'docker-compose'."
	echo "---- Please run $(dirname $0)/system-check first!"
	exit 1
}

# Check we are in an empty directory
[ -z "$(ls -a|tr -d '\n .')" ] || {
	echo "Please run this script in an empty directory"
	exit 1
	}

# The current dicrectory is the root-directory for the smarthome software
ROOT_DIR=$(pwd)

# Create the docker-compose.yml file in the ROOT_DIR
YML_FILE=$ROOT_DIR/docker-compose.yml

# Default values for ports.
# These can be changed when necessary interactively)
MOSQUITTO_1883=1883
MOSQUITTO_9001=9001
DOMOTICZ_DEVICES="/dev/ttyACM0"  # More than 1 device is possible
DOMOTICZ_8080=8080
ZIGBEE_DEVICE=/dev/ttyACM0  # Only one device is possible
RHASSPY_PROFILE=nl
RHASSPY_12101=12101
NODERED_1880=1880

# Use the directory 'volumes' in the directory of the docker-compose file as default value
VOLUMES_DIR=$(cd $(dirname $YML_FILE) 2>/dev/null && pwd)/volumes

# Give the user the opportunity to alter the VOLUMES_DIR
get_value_for VOLUMES_DIR $ROOT_DIR/volumes

mkdir -p $VOLUMES_DIR || {
	echo "---- ERROR: I can not create directory '$VOLUMES_DIR'."
	echo "---- Please check the permissions of the existing directories in the path"
	exit 1
}

# Initialize default value for TZ
eval  `timedatectl -p Timezone show`
TZ=$Timezone

# Give the user the opportunity to alter the value for TZ
get_value_for TZ $TZ

init_yml
confirm_install mosquitto
confirm_install zigbee2mqtt # must be installed before domoticz!
confirm_install domoticz
confirm_install rhasspy
confirm_install node-red
create_bin
