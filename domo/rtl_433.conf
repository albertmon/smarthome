# config for rtl_433
# A valid config line is a keyword followed by an argument to the end of line.
# Whitespace around the keyword is ignored, whitespace is space and tab
# Comments start with a hash sign, no inline comments, empty lines are ok.
#
# Boolean options can be true/false, yes/no, on/off, enable/disable, or 1/0
#
# All options will be applied in the order given, overwriting previous values
#
# Config files can be nested/stacked (use multiple -c and config_file = ).
#
# If no -c option is given the first found of this list will be loaded:
# - ./rtl_433.conf
# - ~/.config/rtl_433/rtl_433.conf
# - /usr/local/etc/rtl_433.conf
# - /etc/rtl_433.conf

## General options

# as command line option:
#   [-v] Increase verbosity (can be used multiple times).
#        -v : verbose, -vv : verbose decoders, -vvv : debug decoders, -vvvv : trace decoding).
# 0 = normal, 1 = verbose, 2 = verbose decoders, 3 = debug decoders, 4 = trace decoding
 

# as command line option:
#   [-c <path>] Read config options from a file
#config_file

## Tuner options

# as command line option:
#   [-d <RTL-SDR USB device index>] (default: 0)
#   [-d :<RTL-SDR USB device serial (can be set with rtl_eeprom -s)>]
#   [-d "" Open default SoapySDR device
#   [-d driver=rtlsdr Open e.g. specific SoapySDR device
# default is "0" (RTL-SDR) or "" (SoapySDR)
device        0

# as command line option:
#   [-g <gain>] (default: 0 for auto)
# For RTL-SDR: gain in tenths of dB ("0" is auto).
# For SoapySDR: gain in dB for automatic distribution ("" is auto), or string of gain elements.
# E.g. "LNA=20,TIA=8,PGA=2" for LimeSDR.
gain          0

# as command line option:
#   [-t <settings>] apply a list of keyword=value settings for SoapySDR devices
# E.g. "antenna=A,bandwidth=4.5M,rfnotch_ctrl=false"
#settings      antenna=A,bandwidth=4.5M

# as command line option:
#   [-f <frequency>] [-f...] Receive frequency(s) (default: 433920000 Hz)
# default is "433.92M", other reasonable values are 315M, 345M, 915M and 868M
frequency     868.288M

# as command line option:
#   [-H <seconds>] Hop interval for polling of multiple frequencies (default: 600 seconds)
# default is "600" seconds, only used when multiple frequencies are given
hop_interval  600

# as command line option:
#   [-p <ppm_error] Correct rtl-sdr tuner frequency offset error (default: 0)
# default is "0"
ppm_error     0

# as command line option:
#   [-s <sample rate>] Set sample rate (default: 250000 Hz)
# default is "250k", other valid settings are 1024k, 2048k, 3200k
sample_rate   250k

## Demodulator options

# as command line option:
#   [-R <device>] Enable only the specified device decoding protocol (can be used multiple times)
# see "protocol" section below.

# as command line option:
#   [-G] Enable blacklisted device decoding protocols, for testing only.
#register_all false

# as command line option:
#   [-X <spec> | help] Add a general purpose decoder (prepend -R 0 to disable all decoders)
# see "decoder" section below.

# as command line option:
#   [-Y auto | classic | minmax] FSK pulse detector mode.
#pulse_detect auto

# as command line option:
#   [-Y level=<dB level>] Manual detection level used to determine pulses (-1.0 to -30.0) (0=auto).
#pulse_detect level=0

# as command line option:
#   [-Y minlevel=<dB level>] Manual minimum detection level used to determine pulses (-1.0 to -99.0).
#pulse_detect minlevel=-12

# as command line option:
#   [-Y minsnr=<dB level>] Minimum SNR to determine pulses (1.0 to 99.0).
#pulse_detect minsnr=9

# as command line option:
#   [-Y autolevel] Set minlevel automatically based on average estimated noise.
#pulse_detect autolevel

# as command line option:
#   [-Y squelch] Skip frames below estimated noise level to lower cpu load.
#pulse_detect squelch

# as command line option:
#   [-Y ampest | magest] Choose amplitude or magnitude level estimator.
#pulse_detect magest

# as command line option:
#   [-n <value>] Specify number of samples to take (each sample is 2 bytes: 1 each of I & Q)
samples_to_read 0

## Analyze/Debug options

# as command line option:
#   [-a] Analyze mode. Print a textual description of the signal. Disables decoding
#analyze false

# as command line option:
#   [-A] Pulse Analyzer. Enable pulse analysis and decode attempt
analyze_pulses false

# as command line option:
#   [-b] Out block size: 262144 (default)
#out_block_size

# as command line option:
#   [-M time[:<options>]|protocol|level|noise[:<secs>]|stats|bits] Add various metadata to every output line.
# Use "time" to add current date and time meta data (preset for live inputs).
# Use "time:rel" to add sample position meta data (preset for read-file and stdin).
# Use "time:unix" to show the seconds since unix epoch as time meta data.
# Use "time:iso" to show the time with ISO-8601 format (YYYY-MM-DD"T"hh:mm:ss).
# Use "time:off" to remove time meta data.
# Use "time:usec" to add microseconds to date time meta data.
# Use "time:tz" to output time with timezone offset.
# Use "time:utc" to output time in UTC.
#   (this may also be accomplished by invocation with TZ environment variable set).
#   "usec" and "utc" can be combined with other options, eg. "time:unix:utc:usec".
# Use "protocol" / "noprotocol" to output the decoder protocol number meta data.
# Use "level" to add Modulation, Frequency, RSSI, SNR, and Noise meta data.
# Use "noise[:secs]" to report estimated noise level at intervals (default: 10 seconds).
# Use "stats[:[<level>][:<interval>]]" to report statistics (default: 600 seconds).
#   level 0: no report, 1: report successful devices, 2: report active devices, 3: report all
# Use "bits" to add bit representation to code outputs (for debug).
#report_meta level
#report_meta noise
#report_meta stats
#report_meta time:usec
#report_meta protocol

# as command line option:
#   [-y <code>] Verify decoding of demodulated test data (e.g. "{25}fb2dd58") with enabled devices
#test_data {25}fb2dd58

## File I/O options

# as command line option:
#   [-S none|all|unknown|known] Signal auto save. Creates one file per signal.
#     Note: Saves raw I/Q samples (uint8 pcm, 2 channel). Preferred mode for generating test files.
signal_grabber none

# as command line option:
#   [-r <filename>] Read data from input file instead of a receiver
#read_file FILENAME.cu8

# as command line option:
#   [-w <filename>] Save data stream to output file (a '-' dumps samples to stdout)
#write_file FILENAME.cu8

# as command line option:
#   [-W <filename>] Save data stream to output file, overwrite existing file
#overwrite_file FILENAME.cu8

## Data output options

# as command line option:
#   [-F kv|json|csv|mqtt|syslog|null] Produce decoded output in given format.
#     Without this option the default is KV output. Use "-F null" to remove the default.
#     Append output to file with :<filename> (e.g. -F csv:log.csv), defaults to stdout.
#     Specify MQTT server with e.g. -F mqtt://localhost:1883
#     Add MQTT options with e.g. -F "mqtt://host:1883,opt=arg"
#     MQTT options are: user=foo, pass=bar, retain[=0|1], qos=N, <format>[=topic]
#     Supported MQTT formats: (default is all)
#       events: posts JSON event data
#       states: posts JSON state data
#       devices: posts device and sensor info in nested topics
#     The topic string will expand keys like [/model]
#     E.g. -F "mqtt://localhost:1883,user=USERNAME,pass=PASSWORD,retain=0,devices=rtl_433[/id]"
#     Specify host/port for syslog with e.g. -F syslog:127.0.0.1:1514
# default is "kv", multiple outputs can be used.
output json

# as command line option:
#   [-K FILE | PATH | <tag> | <key>=<tag>] Add an expanded token or fixed tag to every output line.
# If <tag> is "FILE" or "PATH" an expanded token will be added.
# The <tag> can also be a GPSd URL, e.g.
#   -K gpsd,lat,lon" (report lat and lon keys from local gpsd)
#   -K loc=gpsd,lat,lon" (report lat and lon in loc object)
#   -K gpsd" (full json TPV report, in default "gps" object)
#   -K foo=gpsd://127.0.0.1:2947" (with key and address)
#   -K bar=gpsd,nmea" (NMEA deault GPGGA report)
#   -K rmc=gpsd,nmea,filter='$GPRMC'" (NMEA GPRMC report)
# Also <tag> can be a generic tcp address, e.g.
#   -K foo=tcp:localhost:4000" (read lines as TCP client)
#   -K bar=tcp://127.0.0.1:3000,init='subscribe tags\\r\\n'"
#   -K baz=tcp://127.0.0.1:5000,filter='a prefix to match'"
#output_tag mytag

# as command line option:
#   [-C] native|si|customary Convert units in decoded output.
# default is "native"
#convert si

# as command line option:
#   [-T] specify number of seconds to run
duration 300

# as command line option:
#   [-E] Stop after outputting successful event(s)
stop_after_successful_events true

## Protocols to enable (command line option "-R")

protocol 119 # Bresser Weather Center 5-in-1

